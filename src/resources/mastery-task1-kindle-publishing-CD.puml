@startuml

class SubmitBookForPublishingActivity {
- PublishingStatusDao publishingStatusDao
+ execute(SubmitBookForPublishingRequest) : SubmitBookForPublishingResponse
}
class BookNotFoundException {
- {static} long serialVersionUID
}

class CatalogDao {
- dynamoDbMapper : DynamoDBMapper
+ CatalogItemVersion getBookFromCatalog(String)
- CatalogItemVersion getLatestVersionOfBook(String)
}


class RecommendationsServiceClient {
- RecommendationsService recommendationsService
+ List<BookRecommendation> getBookRecommendations(BookGenre)
}
class PublishingStatusNotFoundException {
- {static} long serialVersionUID
}

class CatalogItemVersion {
- @DynamoDBHashKey bookId : String
- @DynamoDBRangeKey version : int
- inactive : boolean
- title : String
- author : String
- text : String
- genre : BookGenre
+ String getBookId()
+ void setBookId(String)
+ int getVersion()
+ void setVersion(int)
+ String getTitle()
+ void setTitle(String)
+ String getAuthor()
+ void setAuthor(String)
+ String getText()
+ void setText(String)
+ BookGenre getGenre()
+ void setGenre(BookGenre)
+ boolean isInactive()
+ void setInactive(boolean)
+ String toString()
+ boolean equals(Object)
+ int hashCode()
}


class GetBookActivity {
- RecommendationsServiceClient recommendationServiceClient
- CatalogDao catalogDao
+ execute(GetBookRequest) : GetBookResponse
}
class PublishingStatusItem {
- @DynamoDBHashKey publishingRecordId : String
- @DynamoDBRangeKey status : PublishingRecordStatus
- statusMessage : String
- bookId : String
+ String getPublishingRecordId()
+ void setPublishingRecordId(String)
+ PublishingRecordStatus getStatus()
+ void setStatus(PublishingRecordStatus)
+ String getStatusMessage()
+ void setStatusMessage(String)
+ String getBookId()
+ void setBookId(String)
}

class PublishingStatusDao {
- dynamoDbMapper : DynamoDBMapper
- {static} String ADDITIONAL_NOTES_PREFIX
+ PublishingStatusItem setPublishingStatus(String,PublishingRecordStatus,String)
+ PublishingStatusItem setPublishingStatus(String,PublishingRecordStatus,String,String)
}

class RemoveBookFromCatalogActivity {
- catalogDao : CatalogDao
+ execute(RemoveBookFromCatalogRequest removeBookFromCatalogRequest) : RemoveBookFromCatalogResponse
}
PublishingStatusDao --* SubmitBookForPublishingActivity
GetBookActivity --|> RecommendationsServiceClient
CatalogItemVersion --|> CatalogDao
PublishingStatusItem --|> PublishingStatusDao
CatalogDao --|> BookNotFoundException
CatalogDao --* GetBookActivity
GetBookActivity *-- RecommendationsServiceClient
RuntimeException <|-- BookNotFoundException
RuntimeException <|-- PublishingStatusNotFoundException


@enduml